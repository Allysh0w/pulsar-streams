stream{


  kafkaBroker = "localhost:9092"
  kafkaBroker = ${?KAFKA_BROKER}

  kafkaTopic = "transfers.stream.messages"
  kafkaTopic = ${?KAFKA_TOPIC}

  pulsarBroker = "pulsar://localhost:6650"
  pulsarBroker = ${?PULSAR_BROKER}

  pulsarInTopic = "persistent://streams/standalone/ns1/in"
  pulsarInTopic = ${?PULSAR_IN_TOPIC}

  pulsarOutTopic = "persistent://streams/standalone/ns1/out"
  pulsarOutTopic = ${?PULSAR_OUT_TOPIC}

  # Properties for akka.kafka.ProducerSettings can be
  # defined in this section or a configuration section with
  # the same layout.
  akka.kafka.producer {
    # Tuning parameter of how many sends that can run in parallel.
    # parallelism = 100

    buffer.memory = "33554432"
    buffer.memory = ${?KAFKA_BUFFER_MEMORY}

    linger.ms = "0"
    linger.ms = ${?KAFKA_LINGER}

    batch.size = "16384"
    batch.size = ${?KAFKA_BATCH_SIZE}

    max.block.ms = "8000"
    max.block.ms = ${?MAX_BLOCK_MS}

    # How long to wait for `KafkaProducer.close`
     close-timeout = 5s

    # Fully qualified config path which holds the dispatcher configuration
    # to be used by the producer stages. Some blocking may occur.
    # When this value is empty, the dispatcher configured for the stream
    # will be used.
     use-dispatcher = "akka.kafka.default-dispatcher"

    request.timeout.ms = 8000

    # Use this if you want to use transactions
    # ---------------- transactions ---------------
    #transactional.id = "sendgrid-producer-transactional-id"
    #transactional.id = ${?TRANSACTIONAL_ID}

    #enable.idempotence = true
    #enable.idempotence = ${?ENABLE_IDEMPOTENCE}

    #transaction.timeout.ms = "4000"
    #transaction.timeout.ms = ${?TRANSACTION_TIMEOUT_MS}

    #acks = "all"
    #acks = ${?ACKS_LEVEL}
    # ---------------- transactions ---------------

    max.in.flight.requests.per.connection = 3
    max.in.flight.requests.per.connection = ${?MAX_FLIGHT_REQUESTS}


    # The time interval to commit a transaction when using the `Transactional.sink` or `Transactional.flow`
    # eos-commit-interval = 100ms

    # Properties defined by org.apache.kafka.clients.producer.ProducerConfig
    # can be defined in this configuration section.
    kafka-clients {
      bootstrap.servers = "localhost:9092"


    }
  }

  akka.kafka.consumer {
      # Tuning property of scheduled polls.
      # Controls the interval from one scheduled poll to the next.
      poll-interval = 50ms

      # Tuning property of the `KafkaConsumer.poll` parameter.
      # Note that non-zero value means that the thread that
      # is executing the stage will be blocked. See also the `wakup-timeout` setting below.
      poll-timeout = 50ms

      # The stage will delay stopping the internal actor to allow processing of
      # messages already in the stream (required for successful committing).
      # Prefer use of `DrainingControl` over a large stop-timeout.
      stop-timeout = 30s

      # Duration to wait for `KafkaConsumer.close` to finish.
      close-timeout = 20s

      # If offset commit requests are not completed within this timeout
      # the returned Future is completed `CommitTimeoutException`.
      # The `Transactional.source` waits this ammount of time for the producer to mark messages as not
      # being in flight anymore as well as waiting for messages to drain, when rebalance is triggered.
      commit-timeout = 15s

      # If commits take longer than this time a warning is logged
      commit-time-warning = 1s

      # Not used anymore (since 1.0-RC1)
      # wakeup-timeout = 3s

      # Not used anymore (since 1.0-RC1)
      # max-wakeups = 10

      # If set to a finite duration, the consumer will re-send the last committed offsets periodically
      # for all assigned partitions. See https://issues.apache.org/jira/browse/KAFKA-4682.
      commit-refresh-interval = infinite

      # Not used anymore (since 1.0-RC1)
      # wakeup-debug = true

      # Fully qualified config path which holds the dispatcher configuration
      # to be used by the KafkaConsumerActor. Some blocking may occur.
      use-dispatcher = "akka.kafka.default-dispatcher"

      # Properties defined by org.apache.kafka.clients.consumer.ConsumerConfig
      # can be defined in this configuration section.
      kafka-clients {
        # Disable auto-commit by default
        enable.auto.commit = false
      }

      # Time to wait for pending requests when a partition is closed
      wait-close-partition = 500ms

      # Limits the query to Kafka for a topic's position
      position-timeout = 5s

      # When using `AssignmentOffsetsForTimes` subscriptions: timeout for the
      # call to Kafka's API
      offset-for-times-timeout = 5s

      # Timeout for akka.kafka.Metadata requests
      # This value is used instead of Kafka's default from `default.api.timeout.ms`
      # which is 1 minute.
      metadata-request-timeout = 5s

      # Interval for checking that transaction was completed before closing the consumer.
      # Used in the transactional flow for exactly-once-semantics processing.
      eos-draining-check-interval = 30ms

      # Issue warnings when a call to a partition assignment handler method takes
      # longer than this.
      partition-handler-warning = 5s

      # Settings for checking the connection to the Kafka broker. Connection checking uses `listTopics` requests with the timeout
      # configured by `consumer.metadata-request-timeout`
      connection-checker {

        #Flag to turn on connection checker
        enable = false

        # Amount of attempts to be performed after a first connection failure occurs
        # Required, non-negative integer
        max-retries = 3

        # Interval for the connection check. Used as the base for exponential retry.
        check-interval = 15s

        # Check interval multiplier for backoff interval
        # Required, positive number
        backoff-factor = 2.0
      }
   }
}